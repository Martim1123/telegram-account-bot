// Code generated by MockGen. DO NOT EDIT.
// Source: telebot/user_state.go

// Package telebot is a generated GoMock package.
package telebot

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserStateManager is a mock of UserStateManager interface.
type MockUserStateManager struct {
	ctrl     *gomock.Controller
	recorder *MockUserStateManagerMockRecorder
}

// MockUserStateManagerMockRecorder is the mock recorder for MockUserStateManager.
type MockUserStateManagerMockRecorder struct {
	mock *MockUserStateManager
}

// NewMockUserStateManager creates a new mock instance.
func NewMockUserStateManager(ctrl *gomock.Controller) *MockUserStateManager {
	mock := &MockUserStateManager{ctrl: ctrl}
	mock.recorder = &MockUserStateManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStateManager) EXPECT() *MockUserStateManagerMockRecorder {
	return m.recorder
}

// ClearUserState mocks base method.
func (m *MockUserStateManager) ClearUserState(userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearUserState", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearUserState indicates an expected call of ClearUserState.
func (mr *MockUserStateManagerMockRecorder) ClearUserState(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearUserState", reflect.TypeOf((*MockUserStateManager)(nil).ClearUserState), userID)
}

// GetUserState mocks base method.
func (m *MockUserStateManager) GetUserState(userID int64) (*UserState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserState", userID)
	ret0, _ := ret[0].(*UserState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserState indicates an expected call of GetUserState.
func (mr *MockUserStateManagerMockRecorder) GetUserState(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserState", reflect.TypeOf((*MockUserStateManager)(nil).GetUserState), userID)
}

// SetUserState mocks base method.
func (m *MockUserStateManager) SetUserState(userID int64, state *UserState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserState", userID, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserState indicates an expected call of SetUserState.
func (mr *MockUserStateManagerMockRecorder) SetUserState(userID, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserState", reflect.TypeOf((*MockUserStateManager)(nil).SetUserState), userID, state)
}
